// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OntrackDb.Context;

#nullable disable

namespace OntrackDb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230602080359_Added-SBDCProperty-Medication")]
    partial class AddedSBDCPropertyMedication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DoctorPharmacy", b =>
                {
                    b.Property<int>("DoctorsId")
                        .HasColumnType("int");

                    b.Property<int>("PharmaciesId")
                        .HasColumnType("int");

                    b.HasKey("DoctorsId", "PharmaciesId");

                    b.HasIndex("PharmaciesId");

                    b.ToTable("DoctorPharmacy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OntrackDb.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CodeExpiryDateUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("codeExpiryDateUTC");

                    b.Property<int?>("ComplianceId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstName");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageName");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("isDisabled");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("isEnabled");

                    b.Property<bool>("IsNotification")
                        .HasColumnType("bit")
                        .HasColumnName("isNotification");

                    b.Property<string>("JobPosition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("jobPosition");

                    b.Property<string>("LastDeviceId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastDeviceId");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastLogin");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<DateTime?>("LastVerifiedDateUTC")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastVerifiedDateUTC");

                    b.Property<int?>("LicensesId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwilioPhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("twilioPhoneNumber");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("verificationCode");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ComplianceId");

                    b.HasIndex("LicensesId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OntrackDb.Entities.ActionItemReconciliationToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("actionItemReconciliationToDo");
                });

            modelBuilder.Entity("OntrackDb.Entities.ActionItemToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("actionItemToDo");
                });

            modelBuilder.Entity("OntrackDb.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLineOne")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressLineOne");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("addressLineTwo");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("state");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("zipCode");

                    b.HasKey("Id");

                    b.ToTable("address");
                });

            modelBuilder.Entity("OntrackDb.Entities.AdminNotification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<bool>("ForSuperAdminOnly")
                        .HasColumnType("bit")
                        .HasColumnName("forSuperAdminOnly");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notificationType");

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("readDateTime");

                    b.Property<DateTime>("SendDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("sendDateTime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("adminNotification");
                });

            modelBuilder.Entity("OntrackDb.Entities.Allergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MedicationSubstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationSubstanceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReactionId");

                    b.ToTable("allergy");
                });

            modelBuilder.Entity("OntrackDb.Entities.Appointment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("duration");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("bit")
                        .HasColumnName("isCancel");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("startDateTime");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("OntrackDb.Entities.AuditActionSourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionSourceType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AuditActionSourceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionSourceType = "PatientProfile"
                        },
                        new
                        {
                            Id = 2,
                            ActionSourceType = "PatientReportedMedications"
                        },
                        new
                        {
                            Id = 3,
                            ActionSourceType = "HealthConditions"
                        },
                        new
                        {
                            Id = 4,
                            ActionSourceType = "PatientInbox"
                        },
                        new
                        {
                            Id = 5,
                            ActionSourceType = "CompanyInbox"
                        },
                        new
                        {
                            Id = 6,
                            ActionSourceType = "RefillRequest"
                        },
                        new
                        {
                            Id = 7,
                            ActionSourceType = "DoctorPhone"
                        },
                        new
                        {
                            Id = 8,
                            ActionSourceType = "DoctorFax"
                        },
                        new
                        {
                            Id = 9,
                            ActionSourceType = "PharmacyCall"
                        },
                        new
                        {
                            Id = 10,
                            ActionSourceType = "PatientPhone"
                        },
                        new
                        {
                            Id = 11,
                            ActionSourceType = "PatientEmail"
                        },
                        new
                        {
                            Id = 12,
                            ActionSourceType = "Appointments"
                        },
                        new
                        {
                            Id = 13,
                            ActionSourceType = "PatientDocument"
                        },
                        new
                        {
                            Id = 14,
                            ActionSourceType = "PatientNote"
                        },
                        new
                        {
                            Id = 15,
                            ActionSourceType = "PharmacyNote"
                        },
                        new
                        {
                            Id = 16,
                            ActionSourceType = "PatientConsent"
                        },
                        new
                        {
                            Id = 17,
                            ActionSourceType = "PatientCMR"
                        },
                        new
                        {
                            Id = 18,
                            ActionSourceType = "PatientMedRec"
                        },
                        new
                        {
                            Id = 19,
                            ActionSourceType = "AccountLogin"
                        },
                        new
                        {
                            Id = 20,
                            ActionSourceType = "AccountLogout"
                        });
                });

            modelBuilder.Entity("OntrackDb.Entities.AuditActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("AuditActionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "Access"
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "Exit"
                        },
                        new
                        {
                            Id = 3,
                            ActionType = "Create"
                        },
                        new
                        {
                            Id = 4,
                            ActionType = "Delete"
                        },
                        new
                        {
                            Id = 5,
                            ActionType = "Modify"
                        },
                        new
                        {
                            Id = 6,
                            ActionType = "Texted"
                        },
                        new
                        {
                            Id = 7,
                            ActionType = "Emailed"
                        },
                        new
                        {
                            Id = 8,
                            ActionType = "Mailed"
                        },
                        new
                        {
                            Id = 9,
                            ActionType = "Login"
                        },
                        new
                        {
                            Id = 10,
                            ActionType = "Logout"
                        });
                });

            modelBuilder.Entity("OntrackDb.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActionSourceId")
                        .HasColumnType("int");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ActionSourceId");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("OntrackDb.Entities.CmrMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<string>("ConditionTreated")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("conditionTreated");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direction");

                    b.Property<int?>("DoctorPrescribedId")
                        .HasColumnType("int");

                    b.Property<string>("DrugName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugName");

                    b.Property<string>("DrugSubGroup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugSubGroup");

                    b.Property<string>("GenericName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genericName");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<bool>("IsAttached")
                        .HasColumnType("bit")
                        .HasColumnName("isAttached");

                    b.Property<bool>("IsExclude")
                        .HasColumnType("bit")
                        .HasColumnName("isExclude");

                    b.Property<bool>("IsInclude")
                        .HasColumnType("bit")
                        .HasColumnName("isInclude");

                    b.Property<DateTime>("LastFillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastFillDate");

                    b.Property<string>("NDCNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ndcNumber");

                    b.Property<DateTime>("NextFillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("nextFillDate");

                    b.Property<string>("OptionalCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("optionalCondition");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PayDue")
                        .HasColumnType("int")
                        .HasColumnName("payDue");

                    b.Property<string>("PrescriberName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prescriberName");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("RefillsRemaining")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refillsRemaining");

                    b.Property<string>("RfNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rfNumber");

                    b.Property<DateTime>("RxDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("rxDate");

                    b.Property<string>("RxNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxNumber");

                    b.Property<string>("RxVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxVendorRxID");

                    b.Property<string>("SBDCName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sbdcName");

                    b.Property<int>("Supply")
                        .HasColumnType("int")
                        .HasColumnName("supply");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPrescribedId");

                    b.HasIndex("ImportDataid");

                    b.HasIndex("PatientId");

                    b.ToTable("cmrMedication");
                });

            modelBuilder.Entity("OntrackDb.Entities.CmrPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageName");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<bool>("IsCmrType")
                        .HasColumnType("bit")
                        .HasColumnName("isCmrType");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsMedRecType")
                        .HasColumnType("bit")
                        .HasColumnName("isMedRecType");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int")
                        .HasColumnName("noteId");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<string>("PatientVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientVendorRxID");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ImportDataid");

                    b.HasIndex("NoteId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("cmrPatient");
                });

            modelBuilder.Entity("OntrackDb.Entities.CmrVaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("ServiceTakeawayInformationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTakeawayInformationId");

                    b.ToTable("cmrVaccine");
                });

            modelBuilder.Entity("OntrackDb.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ConsentForCall")
                        .HasColumnType("bit")
                        .HasColumnName("consentForCall");

                    b.Property<bool?>("ConsentForEmail")
                        .HasColumnType("bit")
                        .HasColumnName("consentForEmail");

                    b.Property<bool?>("ConsentForText")
                        .HasColumnType("bit")
                        .HasColumnName("consentForText");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2")
                        .HasColumnName("dob");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fax");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastName");

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryEmail");

                    b.Property<string>("PrimaryPhone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryPhone");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("secondaryEmail");

                    b.Property<string>("SecondaryPhone")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("secondaryPhone");

                    b.HasKey("Id");

                    b.ToTable("contact");
                });

            modelBuilder.Entity("OntrackDb.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSourceFileId")
                        .HasColumnType("int")
                        .HasColumnName("importSourceFileId");

                    b.Property<string>("Npi")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("npi");

                    b.Property<string>("PrescriberVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prescriberVendorRxID");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ImportDataid");

                    b.ToTable("doctor");
                });

            modelBuilder.Entity("OntrackDb.Entities.DoctorMedication", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("CmrMedicationId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorPrescribedId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationId")
                        .HasColumnType("int");

                    b.Property<int?>("MedicationReconciliationId")
                        .HasColumnType("int");

                    b.Property<int?>("OtcMedicationId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CmrMedicationId");

                    b.HasIndex("DoctorPrescribedId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("MedicationReconciliationId");

                    b.HasIndex("OtcMedicationId");

                    b.ToTable("doctorMedication");
                });

            modelBuilder.Entity("OntrackDb.Entities.DoctorPharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("doctorsId");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmaciesId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("doctorPharmacy");
                });

            modelBuilder.Entity("OntrackDb.Entities.ImportData", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<DateTime>("created_datetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("importData");
                });

            modelBuilder.Entity("OntrackDb.Entities.ImportFileStagingData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateFilled")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DaysSupply")
                        .HasColumnType("int");

                    b.Property<string>("Directions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DispensedItemNDC")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DispensedItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DispensedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ErrorsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImportSourceFileId")
                        .HasColumnType("int");

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("PatientDateofBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientGender")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientIdentifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("PatientPaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PatientPrimaryAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatientPrimaryCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPrimaryPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientPrimaryState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPrimaryZipCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PatientRace")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacyNPI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PharmacyName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrescriberFaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrescriberFirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrescriberLastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrescriberNPI")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrescriberPrimaryAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PrescriberPrimaryCity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrescriberPrimaryPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrescriberPrimaryState")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrescriberPrimaryZip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("RefillNumber")
                        .HasColumnType("int");

                    b.Property<int?>("RefillsRemaining")
                        .HasColumnType("int");

                    b.Property<int>("RowNo")
                        .HasColumnType("int");

                    b.Property<string>("RxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ImportSourceFileId");

                    b.ToTable("ImportFileStagingData");
                });

            modelBuilder.Entity("OntrackDb.Entities.ImportFileStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ImportFileStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Uploaded"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Staging In Progress"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Staging Completed"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Import In Progress"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Imported"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Failed"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Partially Imported"
                        });
                });

            modelBuilder.Entity("OntrackDb.Entities.ImportSourceFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlobName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ColumnMappingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorStack")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ImportEndTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ImportStartTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StagingEndTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StagingStartTimeUTC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TotalImported")
                        .HasColumnType("int");

                    b.Property<int?>("TotalRecords")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadDateUTC")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ImportStatusId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("UserId");

                    b.ToTable("ImportSourceFiles");
                });

            modelBuilder.Entity("OntrackDb.Entities.Licenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationDate");

                    b.Property<string>("IssueState")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("issueState");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.ToTable("licenses");
                });

            modelBuilder.Entity("OntrackDb.Entities.Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<string>("ConditionTreated")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("conditionTreated");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direction");

                    b.Property<int?>("DoctorPrescribedId")
                        .HasColumnType("int");

                    b.Property<string>("DrugName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugName");

                    b.Property<string>("DrugSubGroup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugSubGroup");

                    b.Property<string>("GenericName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genericName");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSourceFileId")
                        .HasColumnType("int")
                        .HasColumnName("importSourceFileId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isActive")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("IsExclude")
                        .HasColumnType("bit")
                        .HasColumnName("isExclude");

                    b.Property<bool>("IsInclude")
                        .HasColumnType("bit")
                        .HasColumnName("isInclude");

                    b.Property<DateTime>("LastFillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastFillDate");

                    b.Property<string>("NDCNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ndcNumber");

                    b.Property<DateTime>("NextFillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("nextFillDate");

                    b.Property<string>("OptionalCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("optionalCondition");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PayDue")
                        .HasColumnType("int")
                        .HasColumnName("payDue");

                    b.Property<string>("PrescriberName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prescriberName");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("RefillsRemaining")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refillsRemaining");

                    b.Property<string>("RfNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rfNumber");

                    b.Property<DateTime>("RxDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("rxDate");

                    b.Property<string>("RxNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxNumber");

                    b.Property<string>("RxVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxVendorRxID");

                    b.Property<string>("SBDCName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sbdcName");

                    b.Property<int>("Supply")
                        .HasColumnType("int")
                        .HasColumnName("supply");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPrescribedId");

                    b.HasIndex("ImportDataid");

                    b.HasIndex("PatientId");

                    b.ToTable("medication");
                });

            modelBuilder.Entity("OntrackDb.Entities.MedicationConsumption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("DrugSubGroup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugSubGroup");

                    b.Property<int?>("ImportSourceFileId")
                        .HasColumnType("int")
                        .HasColumnName("importSourceFileId");

                    b.Property<string>("NDCNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ndcNumber");

                    b.Property<int>("PatienId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<string>("RxNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxNumber");

                    b.Property<string>("RxVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxVendorRxID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("medicationConsumptions");
                });

            modelBuilder.Entity("OntrackDb.Entities.MedicationReconciliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActionItem")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("actionItem");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<string>("ConditionTreated")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("conditionTreated");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direction");

                    b.Property<int?>("DoctorPrescribedId")
                        .HasColumnType("int");

                    b.Property<string>("DrugName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugName");

                    b.Property<string>("DrugSubGroup")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("drugSubGroup");

                    b.Property<string>("GenericName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genericName");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<bool>("IsAttached")
                        .HasColumnType("bit")
                        .HasColumnName("isAttached");

                    b.Property<bool>("IsExclude")
                        .HasColumnType("bit")
                        .HasColumnName("isExclude");

                    b.Property<bool>("IsInclude")
                        .HasColumnType("bit")
                        .HasColumnName("isInclude");

                    b.Property<DateTime>("LastFillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastFillDate");

                    b.Property<string>("NDCNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ndcNumber");

                    b.Property<DateTime>("NextFillDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("nextFillDate");

                    b.Property<string>("OptionalCondition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("optionalCondition");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PayDue")
                        .HasColumnType("int")
                        .HasColumnName("payDue");

                    b.Property<string>("PrescriberName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("prescriberName");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("RefillsRemaining")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refillsRemaining");

                    b.Property<string>("RfNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rfNumber");

                    b.Property<DateTime>("RxDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("rxDate");

                    b.Property<string>("RxNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxNumber");

                    b.Property<string>("RxVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rxVendorRxID");

                    b.Property<string>("SBDCName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sbdcName");

                    b.Property<int>("Supply")
                        .HasColumnType("int")
                        .HasColumnName("supply");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPrescribedId");

                    b.HasIndex("ImportDataid");

                    b.HasIndex("PatientId");

                    b.ToTable("medicationReconciliation");
                });

            modelBuilder.Entity("OntrackDb.Entities.MedicationSubstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("medicationSubstance");
                });

            modelBuilder.Entity("OntrackDb.Entities.MedicationToDoRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CmrMedicationId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientToDo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientToDo");

                    b.HasKey("Id");

                    b.HasIndex("CmrMedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("medicationToDoRelated");
                });

            modelBuilder.Entity("OntrackDb.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("FromDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("fromDeleted");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("messageText");

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("readDateTime");

                    b.Property<DateTime>("SentDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("sentDateTime");

                    b.Property<string>("SentStatus")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sentStatus");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<bool>("ToDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("toDeleted");

                    b.Property<string>("ToUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("message");
                });

            modelBuilder.Entity("OntrackDb.Entities.NonRelatedMedicationToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActionItemToDoId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientToDo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientToDo");

                    b.HasKey("Id");

                    b.HasIndex("ActionItemToDoId");

                    b.HasIndex("PatientId");

                    b.ToTable("nonRelatedMedicationToDo");
                });

            modelBuilder.Entity("OntrackDb.Entities.NonRelatedRecocilationToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActionItemReconciliationToDoId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientToDo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientToDo");

                    b.HasKey("Id");

                    b.HasIndex("ActionItemReconciliationToDoId");

                    b.HasIndex("PatientId");

                    b.ToTable("nonRelatedRecocilationToDo");
                });

            modelBuilder.Entity("OntrackDb.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdated");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("OntrackDb.Entities.Notification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notificationType");

                    b.Property<DateTime>("ReadDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("readDateTime");

                    b.Property<DateTime>("SendDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("sendDateTime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("notification");
                });

            modelBuilder.Entity("OntrackDb.Entities.OtcMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("condition");

                    b.Property<string>("Direction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direction");

                    b.Property<int?>("DoctorPrescribedId")
                        .HasColumnType("int");

                    b.Property<string>("GPCKName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gpckName");

                    b.Property<bool>("IsCmrCreated")
                        .HasColumnType("bit")
                        .HasColumnName("isCmrCreated");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsRecCreated")
                        .HasColumnType("bit")
                        .HasColumnName("isRecCreated");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("SBDCName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sbdcName");

                    b.HasKey("Id");

                    b.HasIndex("DoctorPrescribedId");

                    b.HasIndex("PatientId");

                    b.ToTable("otcMedication");
                });

            modelBuilder.Entity("OntrackDb.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageName");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<int?>("ImportSourceFileId")
                        .HasColumnType("int")
                        .HasColumnName("importSourceFileId");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int")
                        .HasColumnName("noteId");

                    b.Property<string>("PatientVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientVendorRxID");

                    b.Property<int?>("PharmacyId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ImportDataid");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[noteId] IS NOT NULL");

                    b.HasIndex("PharmacyId");

                    b.ToTable("patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.PatientCallInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AttemptNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CallDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CallReason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MedicationsDiscussedJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("PatientCallInfo");
                });

            modelBuilder.Entity("OntrackDb.Entities.PatientMailList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasColumnName("contactId");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdBy");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdDate");

                    b.Property<string>("CreatedUser")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("createdUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("dateOfBirth");

                    b.Property<DateTime>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletedDate");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("LastAccessed")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastAccessed");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdated");

                    b.Property<string>("ModifiedUser")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modifiedUser");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientName");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int")
                        .HasColumnName("pharmacyId");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pharmacyName");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phoneNumber");

                    b.Property<string>("SentType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sentType");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("patientMailList");
                });

            modelBuilder.Entity("OntrackDb.Entities.PatientPDC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Consumptions")
                        .HasColumnType("int");

                    b.Property<int>("DurationMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("HasExclusions")
                        .HasColumnType("bit");

                    b.Property<decimal>("PDC")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PdcMonth")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalFills")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PatientId", "PdcMonth", "DurationMonths", "Condition")
                        .IsUnique();

                    b.ToTable("patientPDC", (string)null);
                });

            modelBuilder.Entity("OntrackDb.Entities.Pdc_Medication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsExclude")
                        .HasColumnType("bit");

                    b.Property<string>("attribute_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("attribute_value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("code_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dosage_form")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("from_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ingredient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("thru_date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("units")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value_set_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value_set_item")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("value_set_subgroup")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pdc_Medications");
                });

            modelBuilder.Entity("OntrackDb.Entities.Pharmacy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("imageName");

                    b.Property<int?>("ImportDataid")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdate");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("NcpdpNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ncpdpNumber");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int")
                        .HasColumnName("noteId");

                    b.Property<string>("NpiNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("npiNumber");

                    b.Property<string>("PharmacyManager")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pharmacyManager");

                    b.Property<string>("PharmacyVendorRxID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pharmacyVendorRxId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("ImportDataid");

                    b.HasIndex("NoteId")
                        .IsUnique()
                        .HasFilter("[noteId] IS NOT NULL");

                    b.ToTable("pharmacy");
                });

            modelBuilder.Entity("OntrackDb.Entities.PharmacyUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PharmacyId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PharmacyId");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyUsers");
                });

            modelBuilder.Entity("OntrackDb.Entities.Reaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("reaction");
                });

            modelBuilder.Entity("OntrackDb.Entities.ReconciliationAllergy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MedicationSubstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationSubstanceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReactionId");

                    b.ToTable("reconciliationAllergy");
                });

            modelBuilder.Entity("OntrackDb.Entities.ReconciliationSideeffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MedicationSubstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationSubstanceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReactionId");

                    b.ToTable("reconciliationSideeffect");
                });

            modelBuilder.Entity("OntrackDb.Entities.ReconciliationToDoRelated", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MedicationReconciliationId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientToDo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientToDo");

                    b.HasKey("Id");

                    b.HasIndex("MedicationReconciliationId");

                    b.HasIndex("PatientId");

                    b.ToTable("recocilationToDoRelated");
                });

            modelBuilder.Entity("OntrackDb.Entities.RxNavMedication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("GenericName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genericName");

                    b.Property<string>("NDCNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ndcNumber");

                    b.Property<string>("SBDCName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sbdcName");

                    b.HasKey("Id");

                    b.ToTable("rxNavMedication");
                });

            modelBuilder.Entity("OntrackDb.Entities.SafetyDisposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ADDLCOINFO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADDRESS1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADDRESS2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CITY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LATITUDE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LONGITUDE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("STATE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZIP")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("safetyDisposal");
                });

            modelBuilder.Entity("OntrackDb.Entities.ServiceTakeawayInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("additionalNotes");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<string>("CmrCompleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cmrCompleted");

                    b.Property<int?>("CmrPatientId")
                        .HasColumnType("int");

                    b.Property<string>("CmrReceiveType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cmrReceiveType");

                    b.Property<string>("CmrReceiveTypeFirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cmrReceiveTypeFirstName");

                    b.Property<string>("CmrReceiveTypeLastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cmrReceiveTypeLastName");

                    b.Property<string>("CmrSendType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cmrSendType");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionCognitivelyImpaired")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descriptionCognitivelyImpaired");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDiscussExerciseDiet")
                        .HasColumnType("bit")
                        .HasColumnName("isDiscussExerciseDiet");

                    b.Property<bool?>("IsFollowUpAppointment")
                        .HasColumnType("bit")
                        .HasColumnName("isFollowUpAppointment");

                    b.Property<bool?>("IsPatientCongnitivelyImpaired")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientCongnitivelyImpaired");

                    b.Property<bool?>("IsPatientLongTermFacility")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientLongTermFacility");

                    b.Property<bool?>("IsVaccination")
                        .HasColumnType("bit")
                        .HasColumnName("isVaccination");

                    b.Property<string>("LanguageTypeTemplate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("languageTypeTemplate");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientTakeawayDeliveryDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientTakeawayDeliveryDate");

                    b.Property<string>("TakeawayReceiveType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("takeawayReceiveType");

                    b.Property<string>("TakeawayTypeInformationType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("takeawayTypeInformationType");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("VaccineName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vaccineName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("CmrPatientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PatientId");

                    b.ToTable("serviceTakeawayInformation");
                });

            modelBuilder.Entity("OntrackDb.Entities.ServiceTakeAwayMedReconciliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("additionalNotes");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("AppointmentID")
                        .HasColumnType("int");

                    b.Property<int?>("CmrPatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionCognitivelyImpaired")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descriptionCognitivelyImpaired");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDiscussExerciseDiet")
                        .HasColumnType("bit")
                        .HasColumnName("isDiscussExerciseDiet");

                    b.Property<bool?>("IsFollowUpAppointment")
                        .HasColumnType("bit")
                        .HasColumnName("isFollowUpAppointment");

                    b.Property<bool?>("IsPatientCongnitivelyImpaired")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientCongnitivelyImpaired");

                    b.Property<bool?>("IsPatientLongTermFacility")
                        .HasColumnType("bit")
                        .HasColumnName("isPatientLongTermFacility");

                    b.Property<bool?>("IsVaccination")
                        .HasColumnType("bit")
                        .HasColumnName("isVaccination");

                    b.Property<string>("LanguageTypeTemplate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("languageTypeTemplate");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientTakeawayDeliveryDate")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("patientTakeawayDeliveryDate");

                    b.Property<string>("RecCompleted")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recCompleted");

                    b.Property<string>("RecReceiveType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recReceiveType");

                    b.Property<string>("RecReceiveTypeFirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recReceiveTypeFirstName");

                    b.Property<string>("RecReceiveTypeLastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recReceiveTypeLastName");

                    b.Property<string>("RecSendType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recSendType");

                    b.Property<string>("TakeawayReceiveType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("takeawayReceiveType");

                    b.Property<string>("TakeawayTypeInformationType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("takeawayTypeInformationType");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("VaccineName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("vaccineName");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("CmrPatientId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PatientId");

                    b.ToTable("serviceTakeAwayMedReconciliation");
                });

            modelBuilder.Entity("OntrackDb.Entities.SideEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("MedicationSubstanceId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("ReactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicationSubstanceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReactionId");

                    b.ToTable("sideEffect");
                });

            modelBuilder.Entity("OntrackDb.Entities.TakeawayVerify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsServiceTakeAwayInfo")
                        .HasColumnType("bit")
                        .HasColumnName("isServiceTakeAwayInfo");

                    b.Property<bool>("IsServiceTakeAwayMedRec")
                        .HasColumnType("bit")
                        .HasColumnName("isServiceTakeAwayMedRec");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2")
                        .HasColumnName("lastModified");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patientId");

                    b.Property<string>("UUID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uUID");

                    b.HasKey("Id");

                    b.ToTable("takeawayVerify");
                });

            modelBuilder.Entity("OntrackDb.Entities.UserCompliance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AnnualCyberTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("AnnualFraudTraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("AnnualHIPPATraining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("BackgroundCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("CyberTrainingRecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FraudTrainingRecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HippaTrainingRecordedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LiabilityInsurance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.ToTable("UserCompliances");
                });

            modelBuilder.Entity("OntrackDb.Entities.VaccineReconciliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int?>("ServiceTakeAwayMedReconciliationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTakeAwayMedReconciliationId");

                    b.ToTable("vaccineReconciliation");
                });

            modelBuilder.Entity("OntrackDb.Entities.WebSocket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConnectionID")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("connectionID");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("webSocket");
                });

            modelBuilder.Entity("DoctorPharmacy", b =>
                {
                    b.HasOne("OntrackDb.Entities.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OntrackDb.Entities.Pharmacy", null)
                        .WithMany()
                        .HasForeignKey("PharmaciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OntrackDb.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OntrackDb.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OntrackDb.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OntrackDb.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OntrackDb.Authentication.User", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OntrackDb.Entities.UserCompliance", "Compliance")
                        .WithMany()
                        .HasForeignKey("ComplianceId");

                    b.HasOne("OntrackDb.Entities.Licenses", "Licenses")
                        .WithMany()
                        .HasForeignKey("LicensesId");

                    b.Navigation("Address");

                    b.Navigation("Compliance");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("OntrackDb.Entities.AdminNotification", b =>
                {
                    b.HasOne("OntrackDb.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");

                    b.HasOne("OntrackDb.Entities.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Appointment");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Entities.Allergy", b =>
                {
                    b.HasOne("OntrackDb.Entities.MedicationSubstance", "MedicationSubstance")
                        .WithMany()
                        .HasForeignKey("MedicationSubstanceId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("OntrackDb.Entities.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId");

                    b.Navigation("MedicationSubstance");

                    b.Navigation("Patient");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("OntrackDb.Entities.Appointment", b =>
                {
                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Entities.AuditLog", b =>
                {
                    b.HasOne("OntrackDb.Entities.AuditActionSourceType", "SourceType")
                        .WithMany()
                        .HasForeignKey("ActionSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OntrackDb.Entities.AuditActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActionType");

                    b.Navigation("Patient");

                    b.Navigation("SourceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Entities.CmrMedication", b =>
                {
                    b.HasOne("OntrackDb.Entities.Doctor", "DoctorPrescribed")
                        .WithMany()
                        .HasForeignKey("DoctorPrescribedId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("DoctorPrescribed");

                    b.Navigation("ImportData");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.CmrPatient", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OntrackDb.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.HasOne("OntrackDb.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.HasOne("OntrackDb.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("ImportData");

                    b.Navigation("Note");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("OntrackDb.Entities.CmrVaccine", b =>
                {
                    b.HasOne("OntrackDb.Entities.ServiceTakeawayInformation", "ServiceTakeawayInformation")
                        .WithMany()
                        .HasForeignKey("ServiceTakeawayInformationId");

                    b.Navigation("ServiceTakeawayInformation");
                });

            modelBuilder.Entity("OntrackDb.Entities.Doctor", b =>
                {
                    b.HasOne("OntrackDb.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.Navigation("Contact");

                    b.Navigation("ImportData");
                });

            modelBuilder.Entity("OntrackDb.Entities.DoctorMedication", b =>
                {
                    b.HasOne("OntrackDb.Entities.CmrMedication", "CmrMedication")
                        .WithMany()
                        .HasForeignKey("CmrMedicationId");

                    b.HasOne("OntrackDb.Entities.Doctor", "DoctorPrescribed")
                        .WithMany()
                        .HasForeignKey("DoctorPrescribedId");

                    b.HasOne("OntrackDb.Entities.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.HasOne("OntrackDb.Entities.MedicationReconciliation", "MedicationReconciliation")
                        .WithMany()
                        .HasForeignKey("MedicationReconciliationId");

                    b.HasOne("OntrackDb.Entities.OtcMedication", "OtcMedication")
                        .WithMany()
                        .HasForeignKey("OtcMedicationId");

                    b.Navigation("CmrMedication");

                    b.Navigation("DoctorPrescribed");

                    b.Navigation("Medication");

                    b.Navigation("MedicationReconciliation");

                    b.Navigation("OtcMedication");
                });

            modelBuilder.Entity("OntrackDb.Entities.DoctorPharmacy", b =>
                {
                    b.HasOne("OntrackDb.Entities.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OntrackDb.Entities.Pharmacy", "Pharmacy")
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("OntrackDb.Entities.ImportFileStagingData", b =>
                {
                    b.HasOne("OntrackDb.Entities.ImportSourceFile", null)
                        .WithMany()
                        .HasForeignKey("ImportSourceFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OntrackDb.Entities.ImportSourceFile", b =>
                {
                    b.HasOne("OntrackDb.Entities.ImportFileStatus", null)
                        .WithMany()
                        .HasForeignKey("ImportStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OntrackDb.Entities.Pharmacy", null)
                        .WithMany()
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OntrackDb.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OntrackDb.Entities.Medication", b =>
                {
                    b.HasOne("OntrackDb.Entities.Doctor", "DoctorPrescribed")
                        .WithMany()
                        .HasForeignKey("DoctorPrescribedId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany("Medications")
                        .HasForeignKey("PatientId");

                    b.Navigation("DoctorPrescribed");

                    b.Navigation("ImportData");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.MedicationReconciliation", b =>
                {
                    b.HasOne("OntrackDb.Entities.Doctor", "DoctorPrescribed")
                        .WithMany()
                        .HasForeignKey("DoctorPrescribedId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("DoctorPrescribed");

                    b.Navigation("ImportData");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.MedicationToDoRelated", b =>
                {
                    b.HasOne("OntrackDb.Entities.CmrMedication", "CmrMedication")
                        .WithMany()
                        .HasForeignKey("CmrMedicationId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("CmrMedication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.Message", b =>
                {
                    b.HasOne("OntrackDb.Authentication.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.HasOne("OntrackDb.Authentication.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("OntrackDb.Entities.NonRelatedMedicationToDo", b =>
                {
                    b.HasOne("OntrackDb.Entities.ActionItemToDo", "ActionItemToDo")
                        .WithMany()
                        .HasForeignKey("ActionItemToDoId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("ActionItemToDo");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.NonRelatedRecocilationToDo", b =>
                {
                    b.HasOne("OntrackDb.Entities.ActionItemReconciliationToDo", "ActionItemReconciliationToDo")
                        .WithMany()
                        .HasForeignKey("ActionItemReconciliationToDoId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("ActionItemReconciliationToDo");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.Note", b =>
                {
                    b.HasOne("OntrackDb.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OntrackDb.Entities.Notification", b =>
                {
                    b.HasOne("OntrackDb.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");

                    b.HasOne("OntrackDb.Entities.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId");

                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Appointment");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Entities.OtcMedication", b =>
                {
                    b.HasOne("OntrackDb.Entities.Doctor", "DoctorPrescribed")
                        .WithMany()
                        .HasForeignKey("DoctorPrescribedId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("DoctorPrescribed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.Patient", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OntrackDb.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.HasOne("OntrackDb.Entities.Note", "Note")
                        .WithOne("Patient")
                        .HasForeignKey("OntrackDb.Entities.Patient", "NoteId");

                    b.HasOne("OntrackDb.Entities.Pharmacy", "Pharmacy")
                        .WithMany("Patients")
                        .HasForeignKey("PharmacyId");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("ImportData");

                    b.Navigation("Note");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("OntrackDb.Entities.PatientCallInfo", b =>
                {
                    b.HasOne("OntrackDb.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Entities.PatientMailList", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OntrackDb.Entities.PatientPDC", b =>
                {
                    b.HasOne("OntrackDb.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OntrackDb.Entities.Pharmacy", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OntrackDb.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("OntrackDb.Entities.ImportData", "ImportData")
                        .WithMany()
                        .HasForeignKey("ImportDataid");

                    b.HasOne("OntrackDb.Entities.Note", "Note")
                        .WithOne("pharmacy")
                        .HasForeignKey("OntrackDb.Entities.Pharmacy", "NoteId");

                    b.Navigation("Address");

                    b.Navigation("Contact");

                    b.Navigation("ImportData");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("OntrackDb.Entities.PharmacyUser", b =>
                {
                    b.HasOne("OntrackDb.Entities.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyUsers")
                        .HasForeignKey("PharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany("PharmacyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pharmacy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Entities.ReconciliationAllergy", b =>
                {
                    b.HasOne("OntrackDb.Entities.MedicationSubstance", "MedicationSubstance")
                        .WithMany()
                        .HasForeignKey("MedicationSubstanceId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("OntrackDb.Entities.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId");

                    b.Navigation("MedicationSubstance");

                    b.Navigation("Patient");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("OntrackDb.Entities.ReconciliationSideeffect", b =>
                {
                    b.HasOne("OntrackDb.Entities.MedicationSubstance", "MedicationSubstance")
                        .WithMany()
                        .HasForeignKey("MedicationSubstanceId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("OntrackDb.Entities.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId");

                    b.Navigation("MedicationSubstance");

                    b.Navigation("Patient");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("OntrackDb.Entities.ReconciliationToDoRelated", b =>
                {
                    b.HasOne("OntrackDb.Entities.MedicationReconciliation", "MedicationReconciliation")
                        .WithMany()
                        .HasForeignKey("MedicationReconciliationId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("MedicationReconciliation");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.ServiceTakeawayInformation", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OntrackDb.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");

                    b.HasOne("OntrackDb.Entities.CmrPatient", "CmrPatient")
                        .WithMany()
                        .HasForeignKey("CmrPatientId");

                    b.HasOne("OntrackDb.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Address");

                    b.Navigation("Appointment");

                    b.Navigation("CmrPatient");

                    b.Navigation("Contact");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.ServiceTakeAwayMedReconciliation", b =>
                {
                    b.HasOne("OntrackDb.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("OntrackDb.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentID");

                    b.HasOne("OntrackDb.Entities.CmrPatient", "CmrPatient")
                        .WithMany()
                        .HasForeignKey("CmrPatientId");

                    b.HasOne("OntrackDb.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Address");

                    b.Navigation("Appointment");

                    b.Navigation("CmrPatient");

                    b.Navigation("Contact");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("OntrackDb.Entities.SideEffect", b =>
                {
                    b.HasOne("OntrackDb.Entities.MedicationSubstance", "MedicationSubstance")
                        .WithMany()
                        .HasForeignKey("MedicationSubstanceId");

                    b.HasOne("OntrackDb.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("OntrackDb.Entities.Reaction", "Reaction")
                        .WithMany()
                        .HasForeignKey("ReactionId");

                    b.Navigation("MedicationSubstance");

                    b.Navigation("Patient");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("OntrackDb.Entities.VaccineReconciliation", b =>
                {
                    b.HasOne("OntrackDb.Entities.ServiceTakeAwayMedReconciliation", "ServiceTakeAwayMedReconciliation")
                        .WithMany()
                        .HasForeignKey("ServiceTakeAwayMedReconciliationId");

                    b.Navigation("ServiceTakeAwayMedReconciliation");
                });

            modelBuilder.Entity("OntrackDb.Entities.WebSocket", b =>
                {
                    b.HasOne("OntrackDb.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OntrackDb.Authentication.User", b =>
                {
                    b.Navigation("PharmacyUsers");
                });

            modelBuilder.Entity("OntrackDb.Entities.Note", b =>
                {
                    b.Navigation("Patient");

                    b.Navigation("pharmacy");
                });

            modelBuilder.Entity("OntrackDb.Entities.Patient", b =>
                {
                    b.Navigation("Medications");
                });

            modelBuilder.Entity("OntrackDb.Entities.Pharmacy", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("PharmacyUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
